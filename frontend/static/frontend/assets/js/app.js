const { createApp } = Vue;createApp({  delimiters: ['${', '}$'],  mixins: [window.mix ? window.mix : {}],  methods: {    postData(url, payload, config) {      return axios.post(url, payload, config ? config : {})        .then(response => {          return response.data !== undefined ? response.data : (response.json !== undefined ? response.json() : null);        })        .catch(() => {          console.warn('Метод ' + url + ' не реализован');          throw new Error('no "post" method');        });    },    getData(url, payload) {      return axios.get(url, { params: payload })        .then(response => {          return response.data !== undefined ? response.data : (response.json !== undefined ? response.json() : null);    })        .catch(error => {          console.warn('Метод ' + url + ' не реализован');          throw new Error('no "get" method');        });    },    logoutUser() {            const csrfToken = this.getCookie('csrftoken');            this.postData('/api/user/logout/', {}, {                headers: { 'X-CSRFToken': csrfToken }            })            .then(() => {                console.log('Пользователь вышел из системы');                window.location.href = '/';            })            .catch((error) => {                console.error('Ошибка при выходе из системы:', error);            });        },    getCookie(name) {      let cookieValue = null;      if (document.cookie && document.cookie !== '') {        const cookies = document.cookie.split(';');        for (let i = 0; i < cookies.length; i++) {          const cookie = cookies[i].trim();          if (cookie.substring(0, name.length + 1) === name + '=') {            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));            break;          }        }      }      return cookieValue;    },  },}).mount('#site');